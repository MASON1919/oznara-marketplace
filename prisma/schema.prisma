// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// schema.prisma
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likedListings Like[]

  listings       Listing[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Category{
  Electronics
  Furniture
  Clothing
  Sports
  Books
  Others
}
enum Method{
  Direct
  Delivery
  Both
}

model Listing{
  id        String   @id @default(cuid())
  title     String
  description   String? @db.Text
  category  Category
  listingImages     ListingImage[]
  price     Int
  method    Method
  deleted   Boolean @default(false)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewCount Int      @default(0)
  likeCount Int      @default(0)
  likes Like[]
}

model ListingImage{
  id        String   @id @default(cuid())
  s3Key       String @unique
  mime       String 
  size       Int    
  createdAt DateTime @default(now())
  isCover    Boolean  @default(false)
  listingId String
  listing   Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Like {
  userId    String
  listingId String
  createdAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([userId, listingId])// 중복 찜 방지(복합 PK)
  @@index([userId])
  @@index([listingId])
}